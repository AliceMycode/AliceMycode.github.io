[{"id":"22456837ffa047303a9126edfee6e71f","title":"JS扁平化数组递归和非递归方法","content":"请用递归和非递归的思想扁平化多维数组,下面演示两种递归方法和非递归方法，思想都是遍历每个数组元素若为数组类型则继续调用自身，否则直接压入数组\n递归(forEach&amp;&amp;concat)var arr &#x3D; [[1,[2,3]],[4,[5,6]],[7,8,9],[[10,22,34],56]]\n        function flatten(data)&#123;\n            if(!Array.isArray(arr)) return -1\n            var res &#x3D;[]\n            data.forEach(item &#x3D;&gt; &#123;\n                if(Array.isArray(item))&#123;\n                    res &#x3D; res.concat(flatten(item))\n                &#125;else&#123;\n                res.push(item)\n                &#125;\n            &#125;);\n            return res\n        &#125;\n        console.log(flatten(arr))\n\n递归（reduce&amp;&amp;concat）var arr &#x3D; [[1, [2, 3]], [4, [5, 6]], [7, 8, 9], [[10, [[22], 34]], 56]]\nconst flatten &#x3D; (arr) &#x3D;&gt; &#123;\n      return arr.reduce((result, item) &#x3D;&gt; &#123;\n          return result.concat(Array.isArray(item) ? flatten(item) : item);\n      &#125;, []);\n  &#125;\n  console.log(flatten(arr))\n\n非递归(forEach&amp;&amp;concat)var arr &#x3D; [[1,[2,3]],[4,[5,6]],[7,8,9],[[10,[[22],34]],56]]\n     function flatten(data)&#123;\n        if(!Array.isArray(data)) return -1\n        var res &#x3D; []\n        data.forEach(item &#x3D;&gt; &#123;\n          if(Array.isArray(item))&#123;\n          res &#x3D; res.concat(item.flat(Infinity))\n             &#125;\n       &#125;)\n       return res\n   &#125;\n   console.log(flatten(arr));&#x2F;&#x2F;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 34, 56]\n\n非递归（split&amp;toString()）var arr &#x3D; [[1,[2,3]],[4,[5,6]],[7,8,9],[[10,[[22],34]],56]]\n const flatten &#x3D; data &#x3D;&gt; data.toString().split(&#39;,&#39;).map(item &#x3D;&gt; Number(item))\n console.log(flatten(arr));&#x2F;&#x2F;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 34, 56]","slug":"article-03","date":"2022-04-26T17:42:30.000Z","categories_index":"JAVASCRIPT","tags_index":"扁平化数组","author_index":"AliceAllen"},{"id":"d5f6268e8ac152b60a0e9fc8afaf78f8","title":"查找包含相同数字的较小正整数","content":"请写编写出一个函数，该函数接受一个正整数并返回下一个包含相同数字的较小正整数，当没有包含相同数字的较小数字时返回 -1，包含相同数字但第一位为0时也返回-1，比如下面例子\nFor ExampleFor example:\nnextSmaller(21) &#x3D;&#x3D; 12\nnextSmaller(531) &#x3D;&#x3D; 513\nnextSmaller(2071) &#x3D;&#x3D; 2017\n\n题解function nextSmaller(num)&#123;\n        var PreArray &#x3D; num.toString().split(&#39;&#39;);\n        var length &#x3D; PreArray.length;\n        var minRange &#x3D; parseInt(1+Array(length).join(&#39;0&#39;));\n        for(var i&#x3D;num-1;i&gt;&#x3D;minRange;i--)&#123;\n            var currentArray &#x3D; i.toString().split(&#39;&#39;);\n            var counter &#x3D; 0;\n            for(var j&#x3D;0;j&lt;currentArray.length;j++)&#123;\n                if(PreArray.indexOf(currentArray[j]) &lt; 0)\n                break;\n                counter++;\n                PreArray.splice(PreArray.indexOf(currentArray[j]),1)\n                if(counter &#x3D;&#x3D; length)\n                return i\n            &#125;\n            PreArray &#x3D; num.toString().split(&#39;&#39;); \n        &#125;\n        return -1\n    &#125;\n    console.log(nextSmaller(2071))&#x2F;&#x2F;2017\n","slug":"article_02","date":"2022-04-24T06:31:47.000Z","categories_index":"JAVASCRIPT","tags_index":"查找最小正在数","author_index":"AliceAllen"},{"id":"da588a0c5e5e10b7e4608c4ef99250bd","title":"Hello hexo","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"Hello-world","date":"2022-04-17T06:31:47.000Z","categories_index":"hexo","tags_index":"hexo command line","author_index":"AliceAllen"},{"id":"27d9c66674931c392080703751c9e35c","title":"JS含复杂数据类型的数组去重","content":"filter + hasOwnProperty + JSON.stringifyfunction unique(arr) &#123;\n  let obj &#x3D; &#123;&#125;\n  return arr.filter((item, index) &#x3D;&gt; &#123;\n     &#x2F;&#x2F; 防止key重复\n     let newItem &#x3D; item + JSON.stringify(item)\n     return obj.hasOwnProperty(newItem) ? false : obj[newItem] &#x3D; true\n  &#125;)\n&#125;\n","slug":"article_01","date":"2022-04-12T06:31:47.000Z","categories_index":"JAVASCRIPT","tags_index":"数组去重","author_index":"AliceAllen"},{"id":"57a95be61bb0ce6f3aa92c81f6bebc76","title":"JS判断所有数据类型","content":"Object.prototype.toString.callfunction getType(data)&#123;\n    let type &#x3D; typeof data\n    if(type !&#x3D;&#x3D;&#39;object&#39;) return type\n    return Object.prototype.toString.call(data).replace(&#x2F;^\\[object (\\w+)\\]$&#x2F;g,&#39;$1&#39;)\n&#125;\nconsole.log(getType(undefined)) &#x2F;&#x2F;undefined\n\n\n","slug":"my-first-blog","date":"2022-04-11T06:31:47.000Z","categories_index":"JAVASCRIPT","tags_index":"数据类型判断","author_index":"AliceAllen"}]