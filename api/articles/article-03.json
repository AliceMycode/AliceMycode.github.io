{"title":"JS扁平化数组递归和非递归方法","uid":"22456837ffa047303a9126edfee6e71f","slug":"article-03","date":"2022-04-26T17:42:30.000Z","updated":"2022-04-26T17:51:25.397Z","comments":true,"path":"api/articles/article-03.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/04/27/26b4fd6fa80a2052.jpeg","content":"<p>请用递归和非递归的思想扁平化多维数组,下面演示两种递归方法和非递归方法，思想都是遍历每个数组元素<br>若为数组类型则继续调用自身，否则直接压入数组</p>\n<h3 id=\"递归-forEach-amp-amp-concat\"><a href=\"#递归-forEach-amp-amp-concat\" class=\"headerlink\" title=\"递归(forEach&amp;&amp;concat)\"></a>递归(forEach&amp;&amp;concat)</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">var arr &#x3D; [[1,[2,3]],[4,[5,6]],[7,8,9],[[10,22,34],56]]\n        function flatten(data)&#123;\n            if(!Array.isArray(arr)) return -1\n            var res &#x3D;[]\n            data.forEach(item &#x3D;&gt; &#123;\n                if(Array.isArray(item))&#123;\n                    res &#x3D; res.concat(flatten(item))\n                &#125;else&#123;\n                res.push(item)\n                &#125;\n            &#125;);\n            return res\n        &#125;\n        console.log(flatten(arr))</code></pre>\n\n<h3 id=\"递归（reduce-amp-amp-concat）\"><a href=\"#递归（reduce-amp-amp-concat）\" class=\"headerlink\" title=\"递归（reduce&amp;&amp;concat）\"></a>递归（reduce&amp;&amp;concat）</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">var arr &#x3D; [[1, [2, 3]], [4, [5, 6]], [7, 8, 9], [[10, [[22], 34]], 56]]\nconst flatten &#x3D; (arr) &#x3D;&gt; &#123;\n      return arr.reduce((result, item) &#x3D;&gt; &#123;\n          return result.concat(Array.isArray(item) ? flatten(item) : item);\n      &#125;, []);\n  &#125;\n  console.log(flatten(arr))</code></pre>\n\n<h3 id=\"非递归-forEach-amp-amp-concat\"><a href=\"#非递归-forEach-amp-amp-concat\" class=\"headerlink\" title=\"非递归(forEach&amp;&amp;concat)\"></a>非递归(forEach&amp;&amp;concat)</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">var arr &#x3D; [[1,[2,3]],[4,[5,6]],[7,8,9],[[10,[[22],34]],56]]\n     function flatten(data)&#123;\n        if(!Array.isArray(data)) return -1\n        var res &#x3D; []\n        data.forEach(item &#x3D;&gt; &#123;\n          if(Array.isArray(item))&#123;\n          res &#x3D; res.concat(item.flat(Infinity))\n             &#125;\n       &#125;)\n       return res\n   &#125;\n   console.log(flatten(arr));&#x2F;&#x2F;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 34, 56]</code></pre>\n\n<h3 id=\"非递归（split-amp-toString-）\"><a href=\"#非递归（split-amp-toString-）\" class=\"headerlink\" title=\"非递归（split&amp;toString()）\"></a>非递归（split&amp;toString()）</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">var arr &#x3D; [[1,[2,3]],[4,[5,6]],[7,8,9],[[10,[[22],34]],56]]\n const flatten &#x3D; data &#x3D;&gt; data.toString().split(&#39;,&#39;).map(item &#x3D;&gt; Number(item))\n console.log(flatten(arr));&#x2F;&#x2F;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 34, 56]</code></pre>","feature":true,"text":"请用递归和非递归的思想扁平化多维数组,下面演示两种递归方法和非递归方法，思想都是遍历每个数组元素若为数组类型则继续调用自身，否则直接压入数组 递归(forEach&amp;&amp;concat)var arr &#x3D; [[1,[2,3]],[4,[5,6]],[7,8,9...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","count":4,"path":"api/categories/JAVASCRIPT.json"}],"tags":[{"name":"扁平化数组","slug":"扁平化数组","count":1,"path":"api/tags/扁平化数组.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%BD%92-forEach-amp-amp-concat\"><span class=\"toc-text\">递归(forEach&amp;&amp;concat)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%BD%92%EF%BC%88reduce-amp-amp-concat%EF%BC%89\"><span class=\"toc-text\">递归（reduce&amp;&amp;concat）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E9%80%92%E5%BD%92-forEach-amp-amp-concat\"><span class=\"toc-text\">非递归(forEach&amp;&amp;concat)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E9%80%92%E5%BD%92%EF%BC%88split-amp-toString-%EF%BC%89\"><span class=\"toc-text\">非递归（split&amp;toString()）</span></a></li></ol>","author":{"name":"AliceAllen","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/04/17/41ef9adb1a33f91e.jpeg","link":"/","description":"<b>欢迎来到小许的博客</b> <br /><br /><b>一位正在重塑知识的技术人</b> <br /><br><b>日常分享开发过程中遇到的问题</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"查找包含相同数字的较小正整数","uid":"d5f6268e8ac152b60a0e9fc8afaf78f8","slug":"article_02","date":"2022-04-24T06:31:47.000Z","updated":"2022-04-26T17:49:32.535Z","comments":true,"path":"api/articles/article_02.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/04/27/18427e1569757ce8.jpeg","text":"请写编写出一个函数，该函数接受一个正整数并返回下一个包含相同数字的较小正整数，当没有包含相同数字的较小数字时返回 -1，包含相同数字但第一位为0时也返回-1，比如下面例子 For ExampleFor example: nextSmaller(21) &#x3D;&#x3D; 1...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","count":4,"path":"api/categories/JAVASCRIPT.json"}],"tags":[{"name":"查找最小正在数","slug":"查找最小正在数","count":1,"path":"api/tags/查找最小正在数.json"}],"author":{"name":"AliceAllen","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/04/17/41ef9adb1a33f91e.jpeg","link":"/","description":"<b>欢迎来到小许的博客</b> <br /><br /><b>一位正在重塑知识的技术人</b> <br /><br><b>日常分享开发过程中遇到的问题</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}